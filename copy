const express = require('express');
const router = express.Router();
const supabase = require('../supabaseClient');
const multer = require('multer');
const storage = multer.memoryStorage();
const upload = multer({ storage: storage });
// Cloudinary setup
const cloudinary = require('cloudinary').v2;
cloudinary.config({
  cloud_name: 'dbwsguzvt',
  api_key: '872325744724379',
  api_secret: 'Fgy866yvuuargXrgfn7idGFEHlw'
});

// ميدلوير للتحقق من التوكن
async function verifyToken(req, res, next) {
  const authHeader = req.headers['authorization'];
  if (!authHeader || !authHeader.startsWith('Bearer ')) {
    return res.status(401).json({ error: 'يرجى إرسال التوكن في الهيدر (Authorization: Bearer <token>)' });
  }
  const token = authHeader.split(' ')[1];
  const { data, error } = await supabase.auth.getUser(token);
  if (error || !data || !data.user) {
    return res.status(401).json({ error: 'توكن غير صالح أو منتهي الصلاحية.' });
  }
  req.user = data.user;
  next();
}

// حماية جميع العمليات في هذا الملف
router.use(verifyToken);

// جلب جميع الوكالات
router.get('/all', async (req, res) => {
  // السماح فقط للمدير العام أو المدير الفرعي الذي لديه صلاحية إدارة الوكالات (permissions.manage_agencies)
  const { data: currentAdmin, error: currentAdminError } = await supabase.from('admins').select('role, permissions').eq('id', req.user.id).single();
  if (currentAdminError || !currentAdmin) {
    return res.status(401).json({ error: 'غير مصرح. يرجى تسجيل الدخول.' });
  }
  if (
    currentAdmin.role !== 'main' &&
    !(currentAdmin.permissions && currentAdmin.permissions.manage_agencies === true)
  ) {
    return res.status(403).json({ error: 'غير مصرح. هذه العملية تتطلب صلاحية المدير العام أو مدير فرعي لديه صلاحية إدارة الوكالات.' });
  }
  const { data, error } = await supabase.from('agencies').select('*');
  if (error) {
    return res.status(500).json({ error: error.message });
  }
  res.json({ agencies: data });
});

// جلب الوكالات المعلقة فقط (is_approved = false)
router.get('/pending', async (req, res) => {
  // السماح فقط للمدير العام أو المدير الفرعي الذي لديه صلاحية can_approve_agencies
  const { data: currentAdmin, error: currentAdminError } = await supabase.from('admins').select('role, permissions').eq('id', req.user.id).single();
  if (currentAdminError || !currentAdmin) {
    return res.status(401).json({ error: 'غير مصرح. يرجى تسجيل الدخول.' });
  }
  if (
    currentAdmin.role !== 'main' &&
    !(currentAdmin.permissions && currentAdmin.permissions.can_approve_agencies === true)
  ) {
    return res.status(403).json({ error: 'غير مصرح. هذه العملية تتطلب صلاحية المدير العام أو مدير فرعي لديه صلاحية قبول طلبيات الوكالات.' });
  }
  const { data, error } = await supabase.from('agencies').select('*').eq('is_approved', false);
  if (error) {
    return res.status(500).json({ error: error.message });
  }
  res.json({ agencies: data });
});

// إضافة وكالة جديدة (يدعم json أو multipart/form-data للصور)
router.post('/add', async (req, res) => {
  try {
    const {
      email,
      password,
      name,
      wilaya,
      license_number,
      phone,
      bank_account,
      logo,         // base64 or URL
      background,   // base64 or URL
      location_name,
      latitude,
      longitude
    } = req.body;

    // إنشاء مستخدم في auth
    const { data: authUser, error: authError } = await supabase.auth.admin.createUser({
      email,
      password,
      email_confirm: true
    });

    if (authError) return res.status(500).json({ error: authError.message });

    const userId = authUser.user.id;

    // رفع الصور إلى Cloudinary
    let logo_url = null;
    let background_url = null;

    if (logo && logo.startsWith('data:')) {
      const uploaded = await cloudinary.uploader.upload(logo, { folder: 'agencies/logos' });
      logo_url = uploaded.secure_url;
    } else if (logo) {
      logo_url = logo;
    }

    if (background && background.startsWith('data:')) {
      const uploaded = await cloudinary.uploader.upload(background, { folder: 'agencies/backgrounds' });
      background_url = uploaded.secure_url;
    } else if (background) {
      background_url = background;
    }

    // تحقق من أن location_name غير فارغ
    if (!location_name || location_name.trim() === "") {
      return res.status(400).json({ error: "حقل اسم الموقع (location_name) مطلوب ولا يمكن أن يكون فارغاً." });
    }

    // حفظ البيانات في جدول agencies (تأكد من جميع الحقول المطلوبة)
    const { data, error } = await supabase.from('agencies').insert([{
      id: userId,
      name,
      wilaya,
      license_number,
      phone,
      bank_account,
      logo_url,
      background_url,
      location_name,
      latitude,
      longitude,
      is_approved: false // افتراضي
    }]);

    if (error) return res.status(500).json({ error: error.message, details: error });

    res.json({ message: "تمت الإضافة بنجاح", agency_id: userId });

  } catch (err) {
    console.error(err);
    res.status(500).json({ error: "خطأ غير متوقع", details: err.message });
  }
});

// تحديث حالة الوكالة (قبول/تعليق) - فقط المدير العام يمكنه ذلك
router.put('/status/:id', async (req, res) => {
  const { id } = req.params;
  const { is_approved } = req.body;
  // تحقق من أن المستخدم الحالي هو مدير عام
  const { data: currentAdmin, error: currentAdminError } = await supabase.from('admins').select('role').eq('id', req.user.id).single();
  if (currentAdminError || !currentAdmin || currentAdmin.role !== 'main') {
    return res.status(403).json({ error: 'فقط المدير العام يمكنه قبول أو تعليق الوكالات.' });
  }
  // تحديث حالة الوكالة
  const { data, error } = await supabase.from('agencies').update({ is_approved }).eq('id', id).select();
  if (error) {
    return res.status(500).json({ error: error.message });
  }
  res.json({ message: is_approved ? 'تم قبول الوكالة' : 'تم تعليق الوكالة', data });
});

module.exports = router;
